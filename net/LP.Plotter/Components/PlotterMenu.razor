<MudToolBar Dense=true>
    <MudTooltip Text="Zoom Out X-Axis">
        <MudIconButton Icon="@CustomIcons.ZoomOutHorizontal" OnClick="@Model.ZoomOutX" />
    </MudTooltip>
    <MudTooltip Text="Reset Y-Axes">
        <MudIconButton Icon="@Icons.Material.Filled.ZoomOutMap" OnClick="@Model.ResetYAxes" />
    </MudTooltip>
    <MudSpacer />
    <MudTooltip Text="Configure Axes">
        <MudIconButton Icon="@Icons.Material.Filled.LineAxis" OnClick="@OpenAxesMenu" />
    </MudTooltip>
    <MudPopover Open="@ShowAxesMenu">
        <div class="pa-4 d-flex flex-column" style="width:600px">
            <MudText GutterBottom=true Typo="Typo.h4">Axes Position</MudText>
            <div class="d-flex flex-column">
                @foreach (var ax in YAxes)
                {
                    <MudText>@ax.Name</MudText>
                    <MudRadioGroup T="int" SelectedOption="@(ax.SelectedValue)" SelectedOptionChanged="@(ax.OnSelectionChanged)">
                        <MudRadio Option="@(0)" Color="Color.Tertiary">Left</MudRadio>
                        <MudRadio Option="@(1)" Color="Color.Tertiary">None</MudRadio>
                        <MudRadio Option="@(2)" Color="Color.Tertiary">Right</MudRadio>
                    </MudRadioGroup>
                }
            </div>
        </div>
    </MudPopover>
    <MudOverlay @bind-Visible="ShowAxesMenu" DarkBackground="false" LightBackground="false" AutoClose="true" />
</MudToolBar>

@code {
    [Parameter, EditorRequired]
    public PlotModelVM Model { get; set; } = null!;
    private bool ShowAxesMenu { get; set; }
    private IEnumerable<AxisVM> YAxes => Model.YAxes.Select(x => new AxisVM(x, Model));


    private void OpenAxesMenu()
    {
        if (!ShowAxesMenu)
        {
            ShowAxesMenu = true;
        }
    }

    private class AxisVM
    {
        private readonly Axis axis;
        private readonly PlotModelVM model;

        public string Name => $"{axis.Title} {(string.IsNullOrWhiteSpace(axis.Key) ? "" : $"({axis.Key})")}";
        public AxisVM(Axis axis, PlotModelVM model)
        {
            this.axis = axis;
            this.model = model;
            SelectedValue = axis.Position switch
            {
                AxisPosition.Left => 0,
                AxisPosition.None => 1,
                AxisPosition.Right => 2,
                _ => 3,
            };
        }
        public int SelectedValue { get; set; }
        public void OnSelectionChanged(int newValue)
        {
            SelectedValue = newValue;
            axis.Position = newValue switch
            {
                0 => AxisPosition.Left,
                1 => AxisPosition.None,
                2 => AxisPosition.Right,
                _ => AxisPosition.None,
            };
            model.Invalidate();
        }
    }
}