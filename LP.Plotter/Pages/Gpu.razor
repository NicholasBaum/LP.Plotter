@page "/gpu"
@using LP.Plot.Core.Data;
@using LP.Plot.Core.Skia;
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using LP.Plot.Core;

@inject DataService dataService;

<style>
    .canvas-container {
        line-height: 1;
    }

        .canvas-container canvas {
            width: 100%;
            height: 100%;
        }
</style>

@if (isLoading)
{
    <h1>Loading... GPU (WebGL) Canvas</h1>
}
<div @ref="containerDiv" class="container" style="border: red 2px solid">
    <div class="row">
        <div class="col border rounded p-2 canvas-container">

            <SKGLView @ref="skiaEl" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="false"
            @onmousedown="OnMouseDown"
            @onmousemove="OnMouseMove"
            @onmouseup="OnMouseUp"
            @onmousewheel="OnMouseWheel" oncontextmenu="return false" />

        </div>
    </div>
</div>
@*
    oncontextmenu="return false" prevents the context menu
    no @ signs means it acutal js code other solutions didn't work
 *@
@code {
    SKGLView skiaEl = null!;
    ElementReference containerDiv;
    Plot? plot;
    bool isLoading = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var t = Task.Run(async () =>
        {
            var data = await dataService.LoadSignal_L();
            plot = Plot.CreateSignal(data);
            plot.Invalidate = skiaEl.Invalidate;
            isLoading = false;
        });
    }

    private void OnPaintSurface(SKPaintGLSurfaceEventArgs e)
    {
        this.plot?.Render(new SkiaRenderContext(e.Surface.Canvas, e.Info.Size.Width, e.Info.Size.Height));
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        plot?.OnMouseDown(Create(e));
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        plot?.OnMouseMove(Create(e));
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        plot?.OnMouseUp(Create(e));
    }

    private void OnMouseWheel(WheelEventArgs e)
    {
        plot?.OnMouseWheel(new(e.OffsetX, e.OffsetY, -e.DeltaY));
    }

    private LPMouseButtonEventArgs Create(MouseEventArgs e)
    {
        LPButton button = e.Buttons switch
        {
            1 => LPButton.Left,
            2 => LPButton.Right,
            _ => LPButton.None,
        };
        return new LPMouseButtonEventArgs(e.OffsetX, e.OffsetY, button);
    }
}