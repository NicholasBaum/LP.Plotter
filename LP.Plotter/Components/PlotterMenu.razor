@using OxyPlot.Axes;
<MudToolBar Dense=true>
    <MudTooltip Text="Time Zoom Out">
        <MudIconButton Icon="@CustomIcons.ZoomOutHorizontal" OnClick="@Model.ZoomOut" />
    </MudTooltip>
    <MudTooltip Text="Reset Axes">
        <MudIconButton Icon="@Icons.Material.Filled.ZoomOutMap" OnClick="@Model.ZoomOutMap" />
    </MudTooltip>
    <MudSpacer />
    <MudTooltip Text="Configure Axes">
        <MudIconButton Icon="@Icons.Material.Filled.LineAxis" OnClick="@OpenAxesMenu" />
    </MudTooltip>
    <MudPopover Open="@ShowAxesMenu">
        <div class="pa-4 d-flex flex-column" style="width:600px">
            <MudText GutterBottom=true Typo="Typo.h4">Assign Axes</MudText>
            <div class="d-flex">
                <MudSelect Style="width:150px;margin-right:20px" Value="@leftSelection" ValueChanged="@OnLeftValueChanged" T="Axis" Label="Left Axis" Variant="Variant.Text">
                    @foreach (var ax in Axes)
                    {
                        <MudSelectItem Value="@ax">@ax.Key</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Style="width:150px" Value="@rightSelection" ValueChanged="@OnRightValueChanged" T="Axis" Label="Right Axis" Variant="Variant.Text">
                    @foreach (var ax in Axes)
                    {
                        <MudSelectItem Value="@ax">@ax.Key</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div class="d-flex justify-end mt-6">
                <MudButton Disabled="@(!IsDirty)" Color="Color.Primary" OnClick="@RevertAction">Revert</MudButton>
            </div>
        </div>
    </MudPopover>
    <MudOverlay @bind-Visible="ShowAxesMenu" DarkBackground="false" LightBackground="false" AutoClose="true" />
</MudToolBar>

@code {
#pragma warning disable CS8618
    [Parameter, EditorRequired]
    public ChannelPlotModel Model { get; set; }
#pragma warning restore CS8618

    private bool ShowAxesMenu { get; set; }
    private bool IsDirty { get; set; }
    private IReadOnlyList<Axis> Axes => Model.Axes.Where(x => !x.Key.ToLowerInvariant().Contains("time")).ToList();
    private Axis? leftSelection;
    private Axis? rightSelection;

    private void OpenAxesMenu()
    {
        if (!ShowAxesMenu)
        {
            Init();
            ShowAxesMenu = true;
        }
    }

    private void OnLeftValueChanged(Axis ax)
    {
        IsDirty = true;
        var tmp = leftSelection;
        leftSelection = ax;
        UpdateAxes(tmp, leftSelection, AxisPosition.Left);
    }

    private void OnRightValueChanged(Axis ax)
    {
        IsDirty = true;
        var tmp = rightSelection;
        rightSelection = ax;
        UpdateAxes(tmp, rightSelection, AxisPosition.Right);
    }

    private void UpdateAxes(Axis? oldSelection, Axis newSelection, AxisPosition updatePosition)
    {
        if (oldSelection is not null)
            oldSelection.IsAxisVisible = false;
        newSelection.IsAxisVisible = true;
        newSelection.Position = updatePosition;

        if (leftSelection == rightSelection)
        {
            switch (updatePosition)
            {
                case AxisPosition.Left:
                    rightSelection = null;
                    break;
                case AxisPosition.Right:
                    leftSelection = null;
                    break;
                default: break;
            }
        }
        Model.Refresh();
    }

    private Dictionary<Axis, (AxisPosition Position, bool IsVisible)> lastValues = new();
    private void Init()
    {
        IsDirty = false;
        lastValues.Clear();
        foreach (var ax in Model.Axes)
            lastValues.Add(ax, (ax.Position, ax.IsAxisVisible));
        leftSelection = Axes.FirstOrDefault(x => x.IsAxisVisible && x.Position == AxisPosition.Left);
        rightSelection = Axes.FirstOrDefault(x => x.IsAxisVisible && x.Position == AxisPosition.Right);
    }

    private void RevertAction()
    {
        foreach (var ax in Model.Axes)
        {
            var (p, v) = lastValues[ax];
            ax.Position = p;
            ax.IsAxisVisible = v;
        }
        leftSelection = Axes.FirstOrDefault(x => x.IsAxisVisible && x.Position == AxisPosition.Left);
        rightSelection = Axes.FirstOrDefault(x => x.IsAxisVisible && x.Position == AxisPosition.Right);
        IsDirty = false;
        Model.Refresh();
    }
}
