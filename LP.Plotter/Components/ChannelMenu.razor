@using LP.Plotter.Data;
@using LP.Plotter.Services;
@using System.Collections.Specialized;
@using LP.Plotter.Components;

@implements IDisposable;

@inject IDialogService dialogService;


<MudPaper Style="@Style">
    @foreach (var s in Model.Sets)
    {
        <div>
            <div style="display:flex; justify-content: space-between; align-items: center; user-select: none;">
                <MudText Typo="Typo.h6">@s.Name</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                               Size="Size.Small"
                               Color="Color.Primary"
                               OnClick="@(_=>SelectChannelsClick(s))" />
            </div>
            <ul>
                @foreach (var c in s.Channels)
                {
                    <li style="margin-left: 20px; display:flex; justify-content: space-between; align-items: center; user-select: none;">
                        <MudText Typo="Typo.body2">@c.Name</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       Color="Color.Primary"
                                       OnClick="@(_=>EditChannelClick(c))" />
                    </li>
                }
            </ul>
        </div>
    }
</MudPaper>


@code {

#pragma warning disable CS8618
    [Parameter]
    public string Style { get; set; }
    [Parameter, EditorRequired]
    public ChannelPlotModel Model { get; set; }
#pragma warning restore CS8618

    private ChannelPlotModel? lastModel;

    private async Task SelectChannelsClick(VChannelSetVM set)
    {
        var parameters = new DialogParameters<SelectChannelsDialog> { { x => x.DataContext, set } };
        var dialog = await dialogService.ShowAsync<SelectChannelsDialog>($"Select Channels for {set.Name}", parameters);
        var result = await dialog.Result;
        Model.Refresh();
    }

    private async Task EditChannelClick(VChannelVM channel)
    {
        var parameters = new DialogParameters<EditChannelDialog> { { x => x.Channel, channel } }; // dictionary intiliazer, it calls a fitting Add method overload
        var dialog = await dialogService.ShowAsync<EditChannelDialog>($"Edit {channel.Name}", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            Model.Refresh();
    }

    private void Redraw(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (lastModel != Model)
        {
            if (lastModel is not null)
            {
                lastModel.Changed -= Redraw;
                lastModel = null;
            }
            if (Model is not null)
            {
                Model.Changed += Redraw;
                lastModel = Model;
            }
        }
    }

    public void Dispose()
    {
        if (Model is not null)
            Model.Changed -= Redraw;
    }
}