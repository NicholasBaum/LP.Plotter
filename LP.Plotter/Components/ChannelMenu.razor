@using LP.Plotter.Data;
@using LP.Plotter.Services;
@using System.Collections.Specialized;
@using LP.Plotter.Components;

@implements IDisposable;

@inject IDialogService dialogService;

<div style="@Style">
    <MudPaper Width="300px" Style="padding: 10px">
        @foreach (var s in PlotData.Sets)
        {
            <div>
                <div style="display:flex; justify-content: space-between; align-items: center; user-select: none;">
                    <MudText Typo="Typo.h6">@s.Name</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                   Size="Size.Small"
                                   Color="Color.Primary"
                                   OnClick="@(_=>SelectChannelsClick(s))" />
                </div>
                <ul>
                    @foreach (var c in s.Channels)
                    {
                        <li style="margin-left: 20px; display:flex; justify-content: space-between; align-items: center; user-select: none;">
                            <MudText Typo="Typo.body2">@c.Name</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           Color="Color.Primary"
                                           OnClick="@(_=>EditChannelClick(c))" />
                        </li>
                    }
                </ul>
            </div>
        }
    </MudPaper>
</div>

@code {

#pragma warning disable CS8618
    [Parameter]
    public string Style { get; set; }
    [Parameter, EditorRequired]
    public ChannelPlotModel PlotData { get; set; }
#pragma warning restore CS8618

    private ChannelPlotModel? lastDataModel;

    private async Task SelectChannelsClick(VChannelSetVM set)
    {
        var parameters = new DialogParameters<SelectChannelsDialog> { { x => x.DataContext, set } };
        var dialog = await dialogService.ShowAsync<SelectChannelsDialog>($"Select Channels for {set.Name}", parameters);
        var result = await dialog.Result;
        PlotData.Refresh();
    }

    private async Task EditChannelClick(VChannelVM channel)
    {

        var parameters = new DialogParameters<EditChannelDialog> { { x => x.Channel, channel } };

        var dialog = await dialogService.ShowAsync<EditChannelDialog>($"Edit {channel.Name}", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
        }
    }

    private void Redraw(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (lastDataModel != PlotData)
        {
            if (lastDataModel is not null)
            {
                lastDataModel.Changed -= Redraw;
                lastDataModel = null;
            }
            if (PlotData is not null)
            {
                PlotData.Changed += Redraw;
                lastDataModel = PlotData;
            }
        }
    }

    public void Dispose()
    {
        if (PlotData is not null)
            PlotData.Changed -= Redraw;
    }
}