@using LP.Plotter.Data;
@using LP.Plotter.Services;
@using System.Collections.Specialized;
@using LP.Plotter.Components;
@using System.Globalization;

@implements IDisposable;

@inject IDialogService dialogService;

<CascadingValue Value="@Model">
    <MudPaper Style="@Style">
        @foreach (var s in Model.Sets)
        {
            <div>
                <div style="display:flex; justify-content: space-between; align-items: center; user-select: none;">
                    <MudText Typo="Typo.h6">@s.Name</MudText>
                    <div>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       Color="Color.Error"
                                       OnClick="@(_=>RemoveSet(s))" />

                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle"
                                       Size="Size.Small"
                                       Color="Color.Primary"
                                       OnClick="@(_=>SelectChannelsClick(s))" />
                    </div>
                </div>
                <ul>
                    @foreach (var c in s.Channels)
                    {
                        <li>
                            <ChannelMenuItem Channel="c"></ChannelMenuItem>
                        </li>
                    }
                </ul>
            </div>
        }
    </MudPaper>
</CascadingValue>

@code {
#pragma warning disable CS8618
    [Parameter]
    public string Style { get; set; }
    [Parameter, EditorRequired]
    public ChannelPlotModel Model { get; set; }
#pragma warning restore CS8618

    private ChannelPlotModel? lastModel;

    private async Task SelectChannelsClick(VChannelSetVM set)
    {
        var parameters = new DialogParameters<SelectChannelsDialog> { { x => x.DataContext, set } };
        var dialog = await dialogService.ShowAsync<SelectChannelsDialog>($"Select Channels for {set.Name}", parameters);
        var result = await dialog.Result;
        Model.Refresh();
    }

    private async Task RemoveSet(VChannelSetVM set)
    {
        bool? result = await dialogService.ShowMessageBox(
         "Warning",
         "Remove Set?",
         yesText: "Remove", cancelText: "Cancel");

        if (result == true)
            Model.Remove(set);
    }

    private void Redraw(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (lastModel != Model)
        {
            if (lastModel is not null)
            {
                lastModel.Changed -= Redraw;
                lastModel = null;
            }
            if (Model is not null)
            {
                Model.Changed += Redraw;
                lastModel = Model;
            }
        }
    }

    public void Dispose()
    {
        if (Model is not null)
            Model.Changed -= Redraw;
    }
}