@using LP.Plotter.Data;
@using System.Globalization;

@inject IDialogService dialogService;

@code {
#pragma warning disable CS8618

    [CascadingParameter]
    public ChannelPlotModel Model { get; set; }

    [Parameter, EditorRequired]
    public VChannelVM Channel { get; set; }
#pragma warning restore CS8618

    private string GetColor()
    {
        var c = Channel.ActualColor;
        return string.Format(CultureInfo.InvariantCulture, "#{0:x2}{1:x2}{2:x2}", c.R, c.G, c.B);
    }

    private void VisibilityToggled(bool toggled)
    {
        Channel.IsVisible = !Channel.IsVisible;
        Model.Refresh();
    }

    private void PickColor() { }

    private async Task EditChannelClick(VChannelVM channel)
    {
        var parameters = new DialogParameters<EditChannelDialog> { { x => x.Channel, Channel } }; // dictionary intiliazer, it calls a fitting Add method overload
        var dialog = await dialogService.ShowAsync<EditChannelDialog>($"Edit {Channel.Name}", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            Model.Refresh();
    }
}

<li style="margin-left: 20px; display:flex; justify-content: space-between; align-items: center; user-select: none;">
    <a style="width: 10px; height: 10px; background-color: @GetColor()" @onclick="@PickColor"></a>
    <MudToggleIconButton Toggled="@Channel.IsVisible"
                         ToggledChanged="VisibilityToggled"
                         Size="Size.Small"
                         ToggledSize="Size.Small"
                         Icon="@Icons.Material.Outlined.RemoveRedEye" Color="@Color.Surface"
                         ToggledIcon="@Icons.Material.Filled.RemoveRedEye" ToggledColor="@Color.Primary" />
    <MudText Typo="Typo.body2">@Channel.Name</MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                   Size="Size.Small"
                   Color="Color.Primary"
                   OnClick="@(_=>EditChannelClick(Channel))" />
</li>
