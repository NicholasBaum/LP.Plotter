@using LP.Plotter.Data;
@using System.Linq;
@inject DataService dataService;

<MudContainer>
    @if (dataError == null)
    {
        <MudTreeView Dense="true" Items="@items" Hover="true">
            <ItemTemplate Context="item">
                <MudTreeViewItem Items="@item.Items" Value="@item" OnClick="() => HandleItemClick(item)"
                    Style="@(item.IsSelected? "background-color: red;" : "background-color: green;")">
                    <BodyContent>
                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                            <MudText Style="justify-self: start;" Class="ml-3 cursor-pointer">
                                @item.DisplayName</MudText>
                        </div>
                    </BodyContent>
                </MudTreeViewItem>
            </ItemTemplate>

        </MudTreeView>
    }
    else
    {
        <MudAlert Severity="Severity.Error">@dataError</MudAlert>
    }
</MudContainer>

@code {

    Exception? dataError = null;
    HashSet<TreeItem> items = new();
    HashSet<TreeItem> SelectedValues { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.items = (await this.dataService.GetFileInfos())
            .GroupBy(x => x.Path.Split("\\")[3])
            .Select(cars => new TreeItem()
                {
                    DisplayName = cars.Key,
                    Items = cars.GroupBy(x => x.Path.Split("\\")[4])
                .Select(runs => new TreeItem()
                {
                    DisplayName = runs.Key,
                    Items = runs.Select(lap => new TreeItem()
                    {
                        Source = lap,
                        DisplayName = lap.FileName,
                    }).ToHashSet()
                }).ToHashSet()
                }).ToHashSet();
        }
        catch (Exception ex)
        {
            this.dataError = ex;
        }
        await base.OnInitializedAsync();
    }

    void HandleItemClick(TreeItem item)
    {
        item.IsSelected = !item.IsSelected;
    }

    class TreeItem
    {
        public bool IsSelected { get; set; } = false;
        public DataObject? Source { get; init; }
        public required string DisplayName { get; init; }
        public HashSet<TreeItem> Items { get; set; } = new();
    }
}