@using LP.Plotter.Data;
@using System.Linq;
@using LP.Plotter.Services;
@inject DataService dataService;
@inject AppService appService;

<MudContainer>
    @if (dataError == null)
    {
        <MudTreeView Dense="true" Items="@items" Hover="true">
            <ItemTemplate Context="item">
                <MudTreeViewItem Items="@item.Items" Value="@item">
                    <BodyContent>
                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                            <MudText Style="justify-self: start;">@item.DisplayName</MudText>
                            @if (!item.HasChildren)
                            {
                                <div style="justify-self: end;">
                                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Size="Size.Medium" Color="Color.Primary"
                                                   OnClick="@((e)=>HandleClick(e, item))" />
                                </div>
                            }
                        </div>
                    </BodyContent>
                </MudTreeViewItem>
            </ItemTemplate>

        </MudTreeView>
    }
    else
    {
        <MudAlert Severity="Severity.Error">@dataError</MudAlert>
    }
</MudContainer>

@code {

    Exception? dataError = null;
    HashSet<CsvTreeItem> items = new();
    HashSet<CsvTreeItem> SelectedValues { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.items = (await this.dataService.GetFileInfos())
            .GroupBy(x => x.Path.Split("\\")[3])
            .Select(cars => new CsvTreeItem()
                {
                    DisplayName = cars.Key,
                    Items = cars.GroupBy(x => x.Path.Split("\\")[4])
                                .Select(runs => new CsvTreeItem()
                                {
                                    DisplayName = runs.Key,
                                    Items = runs.Select(lap => new CsvTreeItem()
                                    {
                                        Source = lap,
                                        DisplayName = lap.FileName,
                                    }).ToHashSet()
                                }).ToHashSet()
                }).ToHashSet();
        }
        catch (Exception ex)
        {
            this.dataError = ex;
        }
        await base.OnInitializedAsync();
    }

    private void HandleClick(MouseEventArgs e, CsvTreeItem item)
    {
        appService.CurrentPlot.Add(item.Source!);
    }

    class CsvTreeItem
    {
        public CsvData? Source { get; init; }
        public required string DisplayName { get; init; }
        public HashSet<CsvTreeItem>? Items { get; set; } = null;
        public bool HasChildren => Items != null;
    }
}